generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole   @default(CUSTOMER)
  phone         String?
  company       String?
  bio           String?    @db.Text
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  properties    Property[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id              String         @id @default(cuid())
  title           String
  description     String?        @db.Text
  type            PropertyType
  status          PropertyStatus @default(DRAFT)
  listingStatus   ListingStatus  @default(ACTIVE)
  address         String
  city            String
  state           String
  zipCode         String
  country         String         @default("Italy")
  latitude        Float?
  longitude       Float?
  price           Decimal        @db.Decimal(12, 2)
  bedrooms        Int?
  bathrooms       Int?
  area            Float?
  lotSize         Float?
  yearBuilt       Int?
  floors          Int?
  parking         Int?
  features        String?        @db.Text
  amenities       String?        @db.Text
  images          String?        @db.Text
  virtualTour     String?
  videoUrl        String?
  slug            String?        @unique
  metaTitle       String?
  metaDescription String?        @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publishedAt     DateTime?
  ownerId         String
  owner           User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([city, type, status])
  @@index([price, type])
  @@index([ownerId])
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum PropertyType {
  APARTMENT
  HOUSE
  VILLA
  COMMERCIAL
  OFFICE
  LAND
  GARAGE
}

enum PropertyStatus {
  FOR_SALE
  FOR_RENT
  SOLD
  RENTED
  DRAFT
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  PENDING
  EXPIRED
}